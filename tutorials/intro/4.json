{
  "name": "Training a Neural Network",
  "summary": "",
  "description": "",
  "visibility": "public",
  "requiredTutorials": ["Normalization and Flatten Layer"],
  "nextTutorials": ["Visualizing and Training"],
  "experienceGain": 100,
  "startProject": {
    "nodes": [
      {
        "id": "0.di77hewn007",
        "type": "input_layer",
        "initialized": false,
        "position": {
          "x": 347,
          "y": 185
        },
        "data": {
          "batch_size": null,
          "dtype": "float32",
          "sparse": false,
          "optional": false
        },
        "identifier": "input",
        "group_identifier": "layer"
      },
      {
        "id": "0.260bbmwtfk6",
        "type": "dense",
        "initialized": false,
        "position": {
          "x": 342.90524228551436,
          "y": 522.3266080027985
        },
        "data": {
          "activation": "relu",
          "use_bias": true,
          "lora_rank": null,
          "units": 128
        },
        "identifier": "dense",
        "group_identifier": "layer"
      },
      {
        "id": "0.lja62xohk3",
        "type": "dense",
        "initialized": false,
        "position": {
          "x": 342.90524228551436,
          "y": 632.9052422855144
        },
        "data": {
          "activation": "softmax",
          "use_bias": true,
          "lora_rank": null,
          "units": 10
        },
        "identifier": "dense",
        "group_identifier": "layer"
      },
      {
        "id": "0.u762xd3km5",
        "type": "mnist",
        "initialized": false,
        "position": {
          "x": 506,
          "y": 739
        },
        "data": {
          "batch_size": 32
        },
        "identifier": "dataset_mnist",
        "group_identifier": "dataset"
      },
      {
        "id": "0.u6mho59r5c",
        "type": "normalization",
        "initialized": false,
        "position": {
          "x": 315.1912377335177,
          "y": 298.5644988491333
        },
        "data": {
          "axis": -1,
          "invert": false
        },
        "identifier": "normalization",
        "group_identifier": "layer"
      },
      {
        "id": "0.1363galch9c",
        "type": "flatten",
        "initialized": false,
        "position": {
          "x": 340.3706651666868,
          "y": 410.2297857266658
        },
        "data": {
          "data_format": "channels_last"
        },
        "identifier": "flatten",
        "group_identifier": "layer"
      }
    ],
    "edges": [
      {
        "id": "vueflow__edge-0.260bbmwtfk6out-0.260bbmwtfk6-0.lja62xohk3in-0.lja62xohk3",
        "type": "smoothstep",
        "source": "0.260bbmwtfk6",
        "target": "0.lja62xohk3",
        "sourceHandle": "out-0.260bbmwtfk6",
        "targetHandle": "in-0.lja62xohk3",
        "data": {},
        "label": "",
        "animated": false,
        "animationSpeed": 0.5,
        "style": {
          "stroke": "green",
          "strokeWidth": 2
        },
        "sourceX": 404.7385552737956,
        "sourceY": 572.3266080027985,
        "targetX": 404.7385552737956,
        "targetY": 626.9052422855144
      },
      {
        "id": "vueflow__edge-0.di77hewn007out-0.di77hewn007-0.u6mho59r5cin-0.u6mho59r5c",
        "type": "smoothstep",
        "source": "0.di77hewn007",
        "target": "0.u6mho59r5c",
        "sourceHandle": "out-0.di77hewn007",
        "targetHandle": "in-0.u6mho59r5c",
        "data": {},
        "label": "",
        "animated": false,
        "animationSpeed": 0.5,
        "style": {
          "stroke": "green",
          "strokeWidth": 2
        },
        "sourceX": 405.316650390625,
        "sourceY": 235,
        "targetX": 405.0679397103534,
        "targetY": 292.56157200655986
      },
      {
        "id": "vueflow__edge-0.u6mho59r5cout-0.u6mho59r5c-0.1363galch9cin-0.1363galch9c",
        "type": "smoothstep",
        "source": "0.u6mho59r5c",
        "target": "0.1363galch9c",
        "sourceHandle": "out-0.u6mho59r5c",
        "targetHandle": "in-0.1363galch9c",
        "data": {},
        "label": "",
        "animated": false,
        "animationSpeed": 0.5,
        "style": {
          "stroke": "green",
          "strokeWidth": 2
        },
        "sourceX": 405.0679397103534,
        "sourceY": 348.57085223910985,
        "targetX": 405.35986683112543,
        "targetY": 404.22685888409234
      },
      {
        "id": "vueflow__edge-0.1363galch9cout-0.1363galch9c-0.260bbmwtfk6in-0.260bbmwtfk6",
        "type": "smoothstep",
        "source": "0.1363galch9c",
        "target": "0.260bbmwtfk6",
        "sourceHandle": "out-0.1363galch9c",
        "targetHandle": "in-0.260bbmwtfk6",
        "data": {},
        "label": "",
        "animated": false,
        "animationSpeed": 0.5,
        "style": {
          "stroke": "green",
          "strokeWidth": 2
        },
        "sourceX": 405.35986683112543,
        "sourceY": 460.23613911664233,
        "targetX": 404.7385552737956,
        "targetY": 516.3266080027985
      }
    ],
    "position": [413.2932659739258, 207.84924115727563],
    "zoom": 0.5241312377584643,
    "viewport": {
      "x": 413.2932659739258,
      "y": 207.84924115727563,
      "zoom": 0.5241312377584643
    }
  },
  "unlockNodes": [],
  "steps": [
    {
      "text": "Welcome to the next stage of your journey! In the previous tutorial, you assembled the final layers of your network and incorporated the MNIST dataset. Now it's time to bring your network to life by training it.",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    },
    {
      "text": "Think of training your neural network like guiding a person through a maze. The person (your model) needs to find the best path to the goal. Along the way, they’ll receive advice from advisors (the data) to help them improve their understanding of the maze, ultimately finding the most efficient route.",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    },
    {
      "text": "Before training begins, we need to create a model. In this context, the model acts like a project manager. It organizes the work, decides which tasks to assign to the teams (layers), and evaluates how well the tasks are being completed. The manager helps your network improve as it learns.",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    },
    {
      "text": "Start by adding the Model node from the MODELS section to the canvas. This is your project manager that will handle the training process.",
      "narrator": "LeNet-5",
      "addNodes": [
        {
          "id": "0.8bszg84j0ww",
          "type": "Model",
          "data": {
            "optimizer": "adam",
            "loss": "categorical_crossentropy",
            "metrics": ["accuracy"],
            "name": "model"
          },
          "identifier": "Model",
          "group_identifier": "model"
        }
      ],
      "addEdges": [],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": ["Model"],
      "unlockNodes": [
        {
          "type": "Model",
          "data": []
        }
      ]
    },
    {
      "text": "Now, you need to tell the model which layers to use. Connect the input to the input layer and the output to the output layer (the last Dense layer).\nThis ensures that your network has a clear starting and ending point for the flow of data.",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [
        {
          "id": "vueflow__edge-0.8bszg84j0wwval-input-0.8bszg84j0ww-0.di77hewn007in-0.di77hewn007",
          "type": "smoothstep",
          "source": "0.8bszg84j0ww",
          "target": "0.di77hewn007",
          "sourceHandle": "val-input-0.8bszg84j0ww",
          "targetHandle": "in-0.di77hewn007",
          "data": {},
          "label": "",
          "animated": false,
          "animationSpeed": 0.5,
          "style": {
            "stroke": "green",
            "strokeWidth": 2
          }
        },
        {
          "id": "vueflow__edge-0.lja62xohk3out-0.lja62xohk3-0.8bszg84j0wwval-output-0.8bszg84j0ww",
          "type": "smoothstep",
          "source": "0.lja62xohk3",
          "target": "0.8bszg84j0ww",
          "sourceHandle": "out-0.lja62xohk3",
          "targetHandle": "val-output-0.8bszg84j0ww",
          "data": {},
          "label": "",
          "animated": false,
          "animationSpeed": 0.5,
          "style": {
            "stroke": "green",
            "strokeWidth": 2
          }
        }
      ],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    },
    {
      "text": "A crucial setting for your model is the Loss function. Think of the loss function as a scorecard that measures how well your network is performing the task. If the loss is high, your model needs to improve; if it's low, the model is doing better.",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    },
    {
      "text": "For now, set the Loss function to Sparse Categorical Crossentropy in the settings of the Model node. We’ll dive deeper into this function in a future lesson.",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [],
      "modifyNodes": [
        {
          "id": "0.8bszg84j0ww",
          "data": {
            "loss": "sparse_categorical_crossentropy"
          }
        }
      ],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    },
    {
      "text": "Now that the model is prepared, we’re ready to train it. To do this, we’ll use the Fit node. This node acts like a command telling the model to begin the training process. Add a Fit node. You can find it in the MODELS section.",
      "narrator": "LeNet-5",
      "addNodes": [
        {
          "id": "0.7uxn1yptkb4",
          "type": "fit",
          "data": {
            "epochs": 1,
            "name": "model"
          },
          "identifier": "fit",
          "group_identifier": "model"
        }
      ],
      "addEdges": [],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": ["fit"],
      "unlockNodes": [
        {
          "type": "fit",
          "data": []
        }
      ]
    },
    {
      "text": "Connect the model to the Fit node. This tells the Fit node which model to train.",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [
        {
          "id": "vueflow__edge-0.8bszg84j0wwout-0.8bszg84j0ww-0.7uxn1yptkb4in-0.7uxn1yptkb4",
          "type": "smoothstep",
          "source": "0.8bszg84j0ww",
          "target": "0.7uxn1yptkb4",
          "sourceHandle": "out-0.8bszg84j0ww",
          "targetHandle": "in-0.7uxn1yptkb4",
          "data": {},
          "label": "",
          "animated": false,
          "animationSpeed": 0.5,
          "style": {
            "stroke": "teal",
            "strokeWidth": 2
          }
        }
      ],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    },
    {
      "text": "The Fit node needs to know which dataset to use for training. To do this, connect train from the MNIST dataset to data in the Fit node. This will provide the model with the training data it needs to learn.",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [
        {
          "id": "vueflow__edge-0.u762xd3km5val-train-0.u762xd3km5-0.7uxn1yptkb4val-data-0.7uxn1yptkb4",
          "type": "smoothstep",
          "source": "0.u762xd3km5",
          "target": "0.7uxn1yptkb4",
          "sourceHandle": "val-train-0.u762xd3km5",
          "targetHandle": "val-data-0.7uxn1yptkb4",
          "data": {},
          "label": "",
          "animated": false,
          "animationSpeed": 0.5,
          "style": {
            "stroke": "#ff5722",
            "strokeWidth": 2
          }
        }
      ],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    },
    {
      "text": "Fantastic job! You’ve successfully set up the core components of your neural network and are now ready to begin training it. In the next lesson, we’ll cover how to actually train the model and monitor its learning progress. See you in the next tutorial!",
      "narrator": "LeNet-5",
      "addNodes": [],
      "addEdges": [],
      "modifyNodes": [],
      "removeNodes": [],
      "removeEdges": [],
      "highlightNodeTypes": [],
      "unlockNodes": []
    }
  ]
}
